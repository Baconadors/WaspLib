(*
# HTTPClient
Wrapper type with methods to interace with built in Simba http features.
*)

{$DEFINE WL_HTTP_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

(*
# WaspClient
Responsible for connecting to waspscripts.com database.
Because of the way Simba HTTPClients work, it's easier to have different clients
for different servers when they use different headers.
*)
type
  TWaspClient = record(THTTPClient)
    Schema: String;
    APIKey: String;

    User: record
      ID: String;
      Username: String;
      AccessToken: String;
      RefreshToken: String;
    end;

    Config: TJSONConfig;
  end;

(*
There's some bug that makes it required to "refresh" the client after logging in.
Oh Simba... you never stop surprising me.
*)
procedure TWaspClient.RefreshClient(isSetup: Boolean = True);
begin
  if isSetup then
    FreeHTTPClient(Self.Client);
  Self.Client := InitializeHTTPClient(True);

  SetHTTPContentType(Self.Client, 'application/json');
  SetHTTPHeader(Self.Client, 'apikey', Self.APIKey);
  if Self.User.AccessToken <> '' then
    SetHTTPHeader(Self.Client, 'Authorization', 'Bearer ' + Self.User.AccessToken);
end;

procedure TWaspClient.SaveRefreshToken();
begin
  if Self.User.RefreshToken <> '' then
    Self.Config.Put('refresh_token', Self.User.RefreshToken);
end;


function TWaspClient.Login(grantType: String; payload: TJSONObject): Boolean;
const
  ROUTE: String = 'auth/v1/token';
  QUERY: String = '?grant_type=';
var
  response: TJSONObject;
begin
  try
    response.Init(Self.POST(ROUTE + QUERY + grantType, payload, False));

    Result := Self.GetHTTPCode() = 200;
    if Result then
    begin
      Self.User.AccessToken := response.getString('access_token');
      Self.User.RefreshToken := response.getString('refresh_token');
      Self.User.ID := response.getJSONObject('user').getString('id');
      Self.User.Username := response.getJSONObject('user').getJSONObject('user_metadata').getJSONObject('custom_claims').getString('global_name');

      Self.RefreshClient();
      Self.SaveRefreshToken();
    end
    else
    begin
      Self.User := [];
      Self.Config.Remove('refresh_token');
    end;
  except
    TerminateScript(response.ToString() + LineEnding + GetExceptionMessage());
  finally
    payload.Free();
    response.Free();
  end;
end;

function TWaspClient.Login(user, password: String): Boolean; overload;
var
  payload: TJSONObject;
begin
  payload.Init();
  payload.Put('email', user);
  payload.Put('password', password);
  Result := Self.Login('password', payload);
end;

function TWaspClient.Login(refreshToken: String): Boolean; overload;
var
  payload: TJSONObject;
begin
  payload.Init();
  payload.Put('refresh_token', refreshToken);
  Result := Self.Login('refresh_token', payload);
end;


function TWaspClient.Logout(): Boolean;
const
  ROUTE: String = 'auth/v1/logout';
begin
  try
    Self.POST(ROUTE, False);
    Result := Self.GetHTTPCode() = 204;
    if Result then
    begin
      Self.User := [];
      Self.Config.Remove('refresh_token');
    end;
  except
    TerminateScript(GetExceptionMessage());
  end;
end;

function TWaspClient.IsLoggedIn(): Boolean;
begin
  Result := Self.User.AccessToken <> '';
end;

procedure TWaspClient.LoadRefreshToken();
var
  token: String;
begin
  token := Self.Config.GetString('refresh_token');
  if (token <> '') and Self.Login(token) then
    DebugLn(Self.Name, 'Previous session refreshed!');
end;

procedure TWaspClient.Setup();
begin
  Self.Init('WaspClient', 'https://db.waspscripts.com/');
  Self.APIKey := 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVucWxwY2hvYm5peWx3cHNqY3FjIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NjM5MzIxMDAsImV4cCI6MTk3OTUwODEwMH0.WUiK6CteSjnOT8A9AcbUHnYyvWwDxlwUwq_ueifPAxY';

  Self.Config.Setup('api');

  Self.RefreshClient(False);
  Self.LoadRefreshToken();
end;


procedure TWaspClient.SetSchema(schema: String);
begin
  if schema = 'public' then
    schema := ''; //public schema is just not having the header.

  if Self.Schema <> schema then
    SetHTTPHeader(Self.Client, 'Accept-Profile', schema);
end;

function TWaspClient.Select(schema, table, query: String; filters: TStringArray = []; orders: TStringArray = []): TJSONArray;
const
  ROUTE: String = 'rest/v1/';
var
  response: String;
begin
  Self.SetSchema(schema);

  if filters <> [] then
    query += '&' + Implode('&', filters);

  if orders <> [] then
    query += '&order=' + Implode('&order=', orders);

  try
    response := Self.GET(ROUTE + table + '?select=' + query, False);

    if Self.GetHTTPCode() = 200 then
      Result.Init(response);
  except
    TerminateScript(GetExceptionMessage());
  end;
end;


function TWaspClient.Storage(route: String): String;
var
  response: String;
begin
  try
    response := Self.GET(route, False);
    if Self.GetHTTPCode() = 200 then
      Result := response;
  except
    TerminateScript(GetExceptionMessage());
  end;
end;

function TWaspClient.Storage(bucket, path: String): String; overload;
const
  ROUTE: String = 'storage/v1/object/authenticated/';
begin
  Result := Self.Storage(ROUTE + bucket + '/' + path);
end;

function TWaspClient.StorageGetSignedURL(bucket, path: String; expiresIn: UInt32 = 10): String;
const
  ROUTE: String = 'storage/v1/object/sign/';
var
  response: String;
  payload, json: TJSONObject;
begin
  payload.Init();
  payload.Put('expiresIn', expiresIn);

  try
    response := Self.POST(ROUTE + bucket + '/' + path, payload, False);
    if Self.GetHTTPCode() = 200 then
    begin
     json.Init(response);
     Result := 'storage/v1' + json.getString('signedURL');
     json.Free();
    end;
  except
    TerminateScript(GetExceptionMessage());
  finally
    payload.Free();
  end;
end;

{$H-}
var
  WaspClient: TWaspClient;
{$H+}
