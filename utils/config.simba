(*
# Config
A full featured JSON config writer and reader.
*)

{$DEFINE WL_CONFIG_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

type
  TJSONArrayObject = record
    Key: String;
    JSONArray: TJSONArray;
  end;

  TJSONArrayObjectArray = array of TJSONArrayObject;

function TJSONArrayObjectArray.Find(key: String): Int32;
begin
  for Result := 0 to High(Self) do
    if Self[Result].Key = key then
      Exit;
  Result := -1;
end;

function TJSONArrayObjectArray.Put(key: String): Int32;
begin
  Result := Length(Self);
  Self += [key, nil];
end;

function TJSONArrayObjectArray.Get(key: String): Int32;
begin
  Result := Self.Find(key);
  if Result > -1 then
  begin
    Self[Result].JSONArray.Free();
    Self[Result].JSONArray := nil;
    Exit;
  end;
  Result := Self.Put(key);
end;


type
(*
(Config)=
## type TConfigJSON
```pascal
TConfigJSON = record
  Path: String;
  JSON: TJSONObject;
end;
```
*)
  TConfigJSON = record
    Path: String;
    JSON: TJSONObject;
    _ArrayHelper: TJSONArrayObjectArray; //Don't touch.
    IsSetup, OnTerminate: Boolean;       //Don't touch.
  end;

(*
## Config.GeTConfigJSON()
```pascal
function TConfigJSON.GeTConfigJSON(): TJSONObject;
```
Helper method to return the current TConfigJSON.Path file as a TJSONObject.
You probably don't need to use this directly.
*)
function TConfigJSON.GetConfig(): TJSONObject;
var
  str: String;
begin
  if FileExists(Self.Path) then
  begin
    str := ReadFileContents(Self.Path);
    if str <> '' then
    begin
      Result.Init(str);
      Exit;
    end;
  end;

  Result.Init();
end;

(*
## Config.Free()
```pascal
procedure TConfigJSON.Free();
```
Used to free your `TConfigJSON`.
It's automatically called on script termination, but you may call it sooner if
you wish to unlock the ram used by this (which should be minimal).
*)
procedure TConfigJSON.Free();
begin
  if not Self.IsSetup then
    Exit;

  Self.JSON.Free();
  Self.JSON := nil;
  Self._ArrayHelper := [];

  Self.IsSetup := False;
end;

(*
## Config.Setup
```pascal
procedure TConfigJSON.Setup(jsonFile: String);
```
Main method to setup your `TConfigJSON`
*)
procedure TConfigJSON.Setup(jsonFile: String = ScriptName);
begin
  if jsonFile.Contains(DirectorySeparator) then
  begin
    Self.Path := ExtractFilePath(jsonFile);
    jsonFile := ExtractFileName(jsonFile);
  end
  else
    Self.Path := AppPath + 'Configs' + DirectorySeparator;

  if not ForceDirectories(Self.Path) then
    TerminateScript('Can''t create configs directory.');

  if not jsonFile.EndsWith('.json') then
    jsonFile += '.json';
  Self.Path += jsonFile;

  Self.JSON := Self.GetConfig();
  Self.IsSetup := True;

  if not Self.OnTerminate then
  begin
    AddOnTerminate(@Self.Free);
    Self.OnTerminate := True;
  end;
end;

(*
## Config.DeleteConfig()
```pascal
procedure TConfigJSON.DeleteConfig();
```
Delete your `TConfigJSON` from disk.
*)
procedure TConfigJSON.DeleteConfig();
begin
  if not DeleteFile(Self.Path) then
    TerminateScript('Failed to delete: ' + Self.Path);
end;

(*
## Config.SaveConfig()
```pascal
procedure TConfigJSON.SaveConfig();
```
Used to save your `TConfigJSON`.
By default, this is always called automatically whenever the config is modified by the {ref}`TConfigJSON.Put()` methods.
*)
procedure TConfigJSON.SaveConfig();
begin
  if Self.JSON = nil then
    TerminateScript('You need to use TConfigJSON.Setup() before trying to save it into a config file.');
  if not WriteFileContents(Self.Path, json.toString(2), False) then
    TerminateScript('Failed to save config.');
end;


(*
## Config.Put()
```pascal
procedure TConfigJSON.Put(key, value: String; save: Boolean = True);
procedure TConfigJSON.Put(key: String; value: Int32; save: Boolean = True); overload;
procedure TConfigJSON.Put(key: String; value: Double; save: Boolean = True); overload;
procedure TConfigJSON.Put(key: String; value: Boolean; save: Boolean = True); overload;
procedure TConfigJSON.Put(key: String; values: TStringArray; save: Boolean = True); overload;
procedure TConfigJSON.Put(key: String; values: TIntegerArray; save: Boolean = True); overload;
procedure TConfigJSON.Put(key: String; values: TDoubleArray; save: Boolean = True); overload;
procedure TConfigJSON.Put(key: String; values: TBoolArray; save: Boolean = True); overload;
procedure TConfigJSON.Put(key: String; value: Pointer; save: Boolean = True); overload;
```
This should be self explanatory. Put a `key` and a `value` pair into your `TConfigJSON`.
The `pointer` version of the method is the only one that might need a little bit more knowledge of
Simba's lower JSON methods and/or pointers but you can use it to place a value that is another JSON object or a JSON array.
*)
procedure TConfigJSON.Put(key, value: String; save: Boolean = True);
begin
  if Self.JSON = nil then
    Exit;
  Self.JSON.Remove(key);
  Self.JSON.Put(key, value);
  if save then
    Self.SaveConfig();
end;

procedure TConfigJSON.Put(key: String; value: Int32; save: Boolean = True); overload;
begin
  if Self.JSON = nil then
    Exit;
  Self.JSON.Remove(key);
  Self.JSON.Put(key, value);
  if save then
    Self.SaveConfig();
end;

procedure TConfigJSON.Put(key: String; value: Double; save: Boolean = True); overload;
begin
  if Self.JSON = nil then
    Exit;
  Self.JSON.Remove(key);
  Self.JSON.Put(key, value);
  if save then
    Self.SaveConfig();
end;

procedure TConfigJSON.Put(key: String; value: Boolean; save: Boolean = True); overload;
begin
  if Self.JSON = nil then
    Exit;
  Self.JSON.Remove(key);
  Self.JSON.Put(key, value);
  if save then
    Self.SaveConfig();
end;

procedure TConfigJSON.Put(key: String; values: TStringArray; save: Boolean = True); overload;
var
  i, j: Int32;
begin
  if Self.JSON = nil then
    Exit;

  i := Self._ArrayHelper.Get(key);
  Self._ArrayHelper[i].JSONArray.Init();

  for j := 0 to High(values) do
    Self._ArrayHelper[i].JSONArray.Put(values[j]);

  Self.JSON.Remove(key);
  Self.JSON.Put(key, Self._ArrayHelper[i].JSONArray);

  if save then
    Self.SaveConfig();
end;

procedure TConfigJSON.Put(key: String; values: TIntegerArray; save: Boolean = True); overload;
var
  i, j: Int32;
begin
  if Self.JSON = nil then
    Exit;

  i := Self._ArrayHelper.Get(key);
  Self._ArrayHelper[i].JSONArray.Init();

  for j := 0 to High(values) do
    Self._ArrayHelper[i].JSONArray.Put(values[j]);

  Self.JSON.Remove(key);
  Self.JSON.Put(key, Self._ArrayHelper[i].JSONArray);

  if save then
    Self.SaveConfig();
end;

procedure TConfigJSON.Put(key: String; values: TDoubleArray; save: Boolean = True); overload;
var
  i, j: Int32;
begin
  if Self.JSON = nil then
    Exit;

  i := Self._ArrayHelper.Get(key);
  Self._ArrayHelper[i].JSONArray.Init();

  for j := 0 to High(values) do
    Self._ArrayHelper[i].JSONArray.Put(values[j]);

  Self.JSON.Remove(key);
  Self.JSON.Put(key, Self._ArrayHelper[i].JSONArray);

  if save then
    Self.SaveConfig();
end;

procedure TConfigJSON.Put(key: String; values: TBoolArray; save: Boolean = True); overload;
var
  i, j: Int32;
begin
  if Self.JSON = nil then
    Exit;

  i := Self._ArrayHelper.Get(key);
  Self._ArrayHelper[i].JSONArray.Init();

  for j := 0 to High(values) do
    Self._ArrayHelper[i].JSONArray.Put(values[j]);

  Self.JSON.Remove(key);
  Self.JSON.Put(key, Self._ArrayHelper[i].JSONArray);

  if save then
    Self.SaveConfig();
end;

procedure TConfigJSON.Put(key: String; value: Pointer; save: Boolean = True); overload;
begin
  if Self.JSON = nil then
    Exit;

  Self.JSON.Remove(key);
  Self.JSON.put(key, value);

  if save then
    Self.SaveConfig();
end;


(*
## Config.Has()
```pascal
function TConfigJSON.Has(key: String; nullIsValid: Boolean = True): Boolean;
```
Checks if a key exists. `nullIsValid` is true by default when set to false
this will return false if the key exists but is set to null.
*)
function TConfigJSON.Has(key: String; nullIsValid: Boolean = True): Boolean;
begin
  if Self.JSON = nil then
    Exit;
  Result := Self.JSON.has(key);

  if not nullIsValid and Result then
    Result := not Self.JSON.isNull(key);
end;


(*
## Config.Get()
```pascal
function TConfigJSON.GetString(key: String): String;
function TConfigJSON.GetInt(key: String): Int32;
function TConfigJSON.GetDouble(key: String): Double;
function TConfigJSON.GetBoolean(key: String): Boolean;
function TConfigJSON.GetNull(key: String): Boolean;
function TConfigJSON.GetStringArray(key: String): TStringArray;
function TConfigJSON.GetIntArray(key: String): TIntegerArray;
function TConfigJSON.GetDoubleArray(key: String): TDoubleArray;
function TConfigJSON.GetBooleanArray(key: String): TBoolArray;
function TConfigJSON.GetObject(key: String): TJSONObject;
```
This should be self explanatory. Returns the value of a `key` in your `TConfigJSON`.
The `Object` version of the method is the only one that might need a little bit more knowledge of
Simba's lower JSON methods and/or pointers but you can use it to return a JSON object or a TJSONArray of TJSONObjects.
*)
function TConfigJSON.GetString(key: String): String;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
    Result := Self.JSON.getString(key);
end;

function TConfigJSON.GetInt(key: String): Int32;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
    Result := Self.JSON.getInt(key);
end;

function TConfigJSON.GetDouble(key: String): Double;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
    Result := Self.JSON.getDouble(key);
end;

function TConfigJSON.GetBoolean(key: String): Boolean;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
    Result := Self.JSON.getBoolean(key);
end;

function TConfigJSON.GetNull(key: String): Boolean;
begin
  if Self.JSON = nil then
    Exit;
  Result := not Self.JSON.has(key) or Self.JSON.isNull(key);
end;

function TConfigJSON.GetStringArray(key: String): TStringArray;
var
  tmp: TJSONArray;
  i: Int32;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
  begin
    tmp := Self.JSON.getJSONArray(key);
    for i := 0 to tmp.length()-1 do
      Result += tmp.getString(i);
  end;
end;

function TConfigJSON.GetIntArray(key: String): TIntegerArray;
var
  tmp: TJSONArray;
  i: Int32;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
  begin
    tmp := Self.JSON.getJSONArray(key);
    for i := 0 to tmp.length()-1 do
      Result += tmp.getInt(i);
  end;
end;

function TConfigJSON.GetDoubleArray(key: String): TDoubleArray;
var
  tmp: TJSONArray;
  i: Int32;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
  begin
    tmp := Self.JSON.getJSONArray(key);
    for i := 0 to tmp.length()-1 do
      Result += tmp.getDouble(i);
  end;
end;

function TConfigJSON.GetBooleanArray(key: String): TBoolArray;
var
  tmp: TJSONArray;
  i: Int32;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
  begin
    tmp := Self.JSON.getJSONArray(key);
    for i := 0 to tmp.length()-1 do
      Result += tmp.getBoolean(i);
  end;
end;

function TConfigJSON.GetObject(key: String): TJSONObject;
begin
  if Self.JSON = nil then
    Exit;
  if Self.JSON.has(key) and not Self.JSON.isNull(key) then
    Result := Self.JSON.getJSONObject(key);
end;


(*
## Config.Remove()
```pascal
procedure TConfigJSON.Remove(key: String);
```
Remove a `key` and it's respective `value` from your `TConfigJSON`.
*)
procedure TConfigJSON.Remove(key: String);
begin
  if Self.JSON = nil then
    TerminateScript('You need to use TConfigJSON.Setup() before trying to delete a key on it.');
  Self.JSON.remove(key);
  Self.SaveConfig();
end;

(*
## Config.ToString()
```pascal
function TConfigJSON.ToString(indentFactor: Int32 = 2): String;
```
Returns a string version of your `TConfigJSON`.

Example:
```pascal
WriteLn MyConfig.ToString();
```
*)
function TConfigJSON.ToString(indentFactor: Int32 = 2): String;
begin
  if Self.JSON = nil then
    Exit;
  Result := Self.JSON.ToString(indentFactor);
end;

type TWaspConfig = TConfigJSON;

type
(*
## INIConfig Methods Description

- `Setup(FileName: String)`: Initializes the configuration path for the INI file.
- `Put(Section, KeyName, Value: String)`: Stores a key-value pair in a specified section.
- `Get(Section, KeyName: String)`: Retrieves the value associated with a key from a section.
- `GetKeys(Section: String)`: Lists all keys within a specified section.
- `DeleteConfig()`: Deletes the configuration file.

## Example Usage

ConfigINI.Setup('MyScriptSettings.ini'); // Set file path

ConfigINI.Put('GUISettings', 'UsePoolPOH', 'True'); // Write setting
writeln(ConfigINI.Get('GUISettings', 'UsePoolPOH')); // Read setting

writeln(ConfigINI.GetKeys('GUISettings')); // List all keys in 'GUISettings'
*)
  TConfigINI = record
    Path: String;
    FileName: String;
  end;

// Initializes configuration path and filename
procedure TConfigINI.Setup(ConfigName: String);
begin
  if ConfigName.Contains(DirectorySeparator) then
  begin
    Self.Path := ExtractFilePath(ConfigName);
    ConfigName := ExtractFileName(ConfigName);
  end
  else
    Self.Path := AppPath + 'Configs' + DirectorySeparator;

  if not ForceDirectories(Self.Path) then
    TerminateScript('Can''t create configs directory.');

  if not ConfigName.EndsWith('.ini') then
    ConfigName += '.ini';
  Self.Path += ConfigName;
end;

// Writes a single key-value pair to a specified section
procedure TConfigINI.Put(Section, KeyName, Value: String);
begin
  WriteINI(Section, KeyName, Value, Self.Path);
end;

// Retrieves a single value by key from a specified section
function TConfigINI.Get(Section, KeyName: String): String;
begin
  Result := ReadINI(Section, KeyName, Self.Path);
end;

// Removes a single key-value pair from a specified section
procedure TConfigINI.Remove(Section, KeyName: String);
begin
  if not FileExists(Self.Path) then
    RaiseException('File does not exist: ' + Self.Path);
  DeleteINI(Section, KeyName, Self.Path);
end;

// Deletes the entire configuration file
procedure TConfigINI.DeleteConfig();
begin
  if FileExists(Self.Path) then
    DeleteFile(Self.Path)
  else
    RaiseException('File does not exist: ' + Self.Path);
end;

// Retrieves all keys from a specified section
function TConfigINI.GetKeys(Section: String): TStringArray;
var
  FileContent: TStringArray;
var
  i: Int32;
  InSection: Boolean;
begin
  if not FileExists(Self.Path) then
    RaiseException('File does not exist: ' + Self.Path);

  FileContent := ReadFileContents(Self.Path).Split(#10);
  while i < Length(FileContent) do begin
    FileContent[i] := FileContent[i].Trim;
    if FileContent[i].StartsWith('[') and FileContent[i].EndsWith(']') then begin
      InSection := FileContent[i].Between('[', ']') = Section;
    end else if InSection and FileContent[i].Contains('=') then begin
      Result += FileContent[i].Before('=').Trim;
    end;
    Inc(i);
  end;
end;

