{$DEFINE WL_ACHIEVEMENTS_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  ERSAchievementTab = (
    SUMMARY,
    QUESTS,
    DIARIES
  );

  ERSSummaryButton = (
    QUESTS_COMPLETED,
    DIARIES_COMPLETED,
    COMBAT_ACHIEVEMENTS,
    COLLECTION_LOG,
    TIME_PLAYED
  );

  ERSAchievementDiary = (
    ARDOUGNE,
    DESERT,
    FALADOR,
    FREMENNIK,
    KANDARIN,
    KARAMJA,
    KOUREND_AND_KEBOS,
    LUMBRIDGE_AND_DRAYNOR,
    MORYTANIA,
    VARROCK,
    WESERT_PROVINCES,
    WILDERNESS
  );



  TRSAchievements = type TRSInterface;




function TRSAchievements.GetCurrentTab(): ERSAchievementTab;
const
  COLORS: array of TCTS2Color = [
    [4418165, 11, 0.18, 0.78],
    [15230302, 13, 0.15, 1.81],
    [5743700, 20, 0.38, 0.58],
    [10760042, 20, 0.09, 0.88]
  ];
var
  b: TBox;
  i: Int32;
begin
  b := GameTabs.GetTabBox(ERSGameTab.QUESTS);

  for i := 0 to High(COLORS) do
    if SRL.CountColor(COLORS[i], b) > 0 then
      Exit(ERSAchievementTab(i));
end;

function TRSAchievements.ScrollAreaFunction(): TBox;
var
  tab: ERSAchievementTab;
begin
  tab := Self.GetCurrentTab();
  if (tab <> ERSAchievementTab.QUESTS) and (tab <> ERSAchievementTab.DIARIES) then
    Exit;

  Result := Self.Bounds();

  if tab = ERSAchievementTab.QUESTS then
  begin
    Result.X1 += 9;
    Result.Y1 += 51;
    Result.X2 -= 6;
    Result.Y2 -= 45;
    Exit;
  end;

  Result.Y1 += 45;
  Result.Y2 -= 4;
end;


procedure TRSAchievements.Setup(); override;
begin
  inherited;

  Self.Name := 'Achievements';
  Self.GetScrollAreaFunction := @Self.ScrollAreaFunction;
end;

procedure TRSAchievements.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  Self.Alignment.Left := [@GameTab.X1];
  Self.Alignment.Right := [@GameTab.X2];
  Self.Alignment.Top := [@GameTab.Y1];
  Self.Alignment.Bottom := [@GameTab.Y2];
end;


function TRSAchievements.IsOpen(): Boolean;
begin
  Result := (GameTabs.GetCurrentTab = ERSGameTab.QUESTS);
end;

function TRSAchievements.Open(): Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.QUESTS);
end;


function TRSAchievements.GetButtons(): TRSButtonArray;
begin
  Result := Self.FindButtons([[89,52], [182, 24]]);
end;

function TRSAchievements.GetButton(button: ERSSummaryButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons();
begin
  if Length(Buttons) = Length(ERSSummaryButton) then
    Result := Buttons[Button];
end;


function TRSAchievements.GetTabs(): TBoxArray;
begin
  Result := Grid(3, 1, 55, 19, [7, 0], [Self.X1+2, Self.Y1 + 5]);
end;

function TRSAchievements.OpenTab(tab: ERSAchievementTab): Boolean;
var
  button: ERSSummaryButton;
begin
  if not Self.Open() then
    Exit(False);

  case Self.GetCurrentTab() of
    tab: Exit(True);
    ERSAchievementTab.SUMMARY:
      if ((tab = ERSAchievementTab.QUESTS) or (tab = ERSAchievementTab.DIARIES)) and Antiban.BioDice(EBioBehavior.MOUSE_GRAVITY) then //MOUSE_GRAVITY is not related to this at all but I figure I could use it.
      begin
        case tab of
          ERSAchievementTab.QUESTS:  button := ERSSummaryButton.QUESTS_COMPLETED;
          ERSAchievementTab.DIARIES: button := ERSSummaryButton.DIARIES_COMPLETED;
        end;

        Self.GetButton(button).Click();
        Exit(WaitUntil(Self.GetCurrentTab() = tab, SRL.TruncatedGauss(50, 1500), 3000));
      end;
  end;

  Mouse.Click(Self.GetTabs[tab], MOUSE_LEFT);
  Result := WaitUntil(Self.GetCurrentTab() = tab, SRL.TruncatedGauss(50, 1500), 3000);
end;


procedure TRSAchievements.Draw(bitmap: TMufasaBitmap); override;
var
  buttons: TRSButtonArray;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  buttons := Self.GetButtons();
  buttons.Draw(bitmap);
end;

procedure TRSAchievements.MakeVisible(Diary : ERSAchievementDiary);
var
  CurrentScroll : Int32 := Self.GetScrollPosition;
  Min, Max : Int32;
begin
  Min := Ord(Diary) - 6;
  if Min < 0 then
    Min := 0;
  Min := Min * 20;

  Max := Ord(Diary) * 20;
  if Max > 100 then
    Max := 100;

  if (CurrentScroll < Min) or (CurrentScroll > Max) then
    Self.SetScrollPosition(Random(Min, Max));
end;

function TRSAchievements.GetDiaryBoxes(): TBoxArray;
var
  tpa: TPointArray;
  atpa: T2DPointArray;
  i: Int32;
  b: TBox;
begin
  if SRL.FindColors(tpa, CTS2(4156310, 9, 0.05, 1.58), Self.Bounds()) < 1 then
    Exit;

  atpa := tpa.Cluster(1);

  for i := 0 to High(atpa) do
  begin
    b := atpa[i].Bounds();
    if b.Area() = 4104 then
      Result += b;
  end;
end;

function TRSAchievements.GetDiaryBox(Diary : ERSAchievementDiary): TBox;
const
  EXPECTED_TEXT : TStringArray := ['Ardo', 'Dese', 'ador', 'Frem', 'Kand', 'Karam', 'Kour', 'Lumb', 'Mort', 'Varr', 'West', 'dern'];
var
  DiaryBoxes   : TBoxArray;
  TextBox      : TBox;
  i            : Int32;
  FoundText    : String;
begin
  Self.MakeVisible(Diary);
  DiaryBoxes := Self.GetDiaryBoxes;
  for i := 0 to High(DiaryBoxes) do
  begin
    TextBox := [DiaryBoxes[i].X1 + 3, DiaryBoxes[i].Y1 + 1, DiaryBoxes[i].X1 + 110, DiaryBoxes[i].Y1 + 16];
    FoundText := OCR.Recognize(TextBox, TOCRColorFilter.Create([16777215, 65535, 901389]), RS_FONT_PLAIN_11);
    if EXPECTED_TEXT[Ord(Diary)] in FoundText then
      Exit(DiaryBoxes[i]);
  end;
  Result := [0, 0];
end;

function TRSAchievements.GetDiaryLevel(Diary : ERSAchievementDiary): Int32;
var
  DiaryBox: TBox;
begin
  Self.Open();
  Self.OpenTab(ERSAChievementTab.DIARIES);
  DiaryBox := Self.GetDiaryBox(Diary);
  Result := Round(SRL.CountColor(CTS2(1357111, 1, 0.01, 0.01), DiaryBox) / 175);
end;

var
  Achievements: TRSAchievements;


procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;

  Achievements.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup(); override;
begin
  inherited;

  Achievements.Setup;
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Achievements.Draw(Bitmap);
end;


