(*
# RoomObjects
*)

{$DEFINE WL_HOUSEOBJECTS_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
(*
## ERSRoomObject
```pascal
ERSRoomObject = (POOL, FAIRY_TREE, JEWELLERY_BOX, PRAYER_ALTAR, MAGIC_ALTAR, LARDER, LECTERN, MYTH_CAPE, NEXUS, PORTAL);
```
*)
  ERSRoomObject = (POOL, FAIRY_TREE, JEWELLERY_BOX, PRAYER_ALTAR, MAGIC_ALTAR, LARDER, LECTERN, MYTH_CAPE, NEXUS, PORTAL);

(*
## TRoomObject
```pascal
  TRoomObject = record
    Coordinates: TPointArray;
    Shape: Vector3;
    UpText: TStringArray;
    Finder: TRSObjectFinder;
    RoomOffset: TPoint;
  end;
```
Record used to store and interact information about POH room objects.
*)
  TRoomObject = record
    Coordinates: TPointArray;
    Shape: Vector3;
    UpText: TStringArray;
    Finder: TRSObjectFinder;
    RoomOffset: TPoint;
  end;

(*
## TRoomObject.Init()
```pascal
procedure TRoomObject.Init(upText: TStringArray; shape: Vector3; roomOffset: TPoint);
```
This method sets up some basic info about a {ref}`TRoomObject`.
*)
procedure TRoomObject.Init(upText: TStringArray; shape: Vector3; roomOffset: TPoint);
begin
  Self := [];
  Self.Shape := shape;
  Self.UpText := upText;
  Self.RoomOffset := roomOffset;
  Self.Finder.ClusterDistance := 3;
  Self.Finder.Erode := 2;
  Self.Finder.Grow := 4;
end;

(*
## TRoomObject.Setup()
```pascal
procedure TRoomObject.Setup(obj: ERSRoomObject); overload;
```
Basically the same as {ref}`TRoomObject.Init()` with some already known information.

Example:
```pascal
var
  obj: TRoomObject;
begin
  obj.Setup(ERSRoomObject.POOL);
end;
```
*)
procedure TRoomObject.Setup(obj: ERSRoomObject); overload;
begin
  case obj of
    ERSRoomObject.POOL:
    begin
      Self.Init(['pool'], [1.5, 1.5, 6], [4,4]);
      Self.Finder.Colors := [CTS2(11514040, 19, 0.10, 0.13)];
    end;

    ERSRoomObject.FAIRY_TREE:
    begin
      Self.Init(['Fairy', 'Tree'], [1.5, 1.5, 6], [16,16]);
      Self.Finder.Colors := [CTS2(7307158, 15, 0.48, 0.69)];
    end;

    ERSRoomObject.JEWELLERY_BOX:
    begin
      Self.Init(['Jewellery', 'Box'], [2, 2, 6], [4,4]);
      Self.Finder.Colors := [CTS2(1287353, 17, 0.02, 0.72), CTS2(530791, 8, 0.24, 2.28)];
    end;
  end;
end;

(*
## TRoomObject.AddCoordinates()
```pascal
procedure TRoomObject.AddCoordinates(coordinates: TPointArray);
```
Adds `coordinates` to a {ref}`TRoomObject`.
Can be called multiple times to add more `coordinates`.

Example:
```pascal
var
  obj: TRoomObject;
begin
  obj.Setup(ERSRoomObject.POOL);
  obj.AddCoordinates([[50, 50]]);
end;
```
*)
procedure TRoomObject.AddCoordinates(coordinates: TPointArray);
begin
  Self.Coordinates += coordinates;
end;


(*
## TRoomObject.Interact
```pascal
function TRoomObject.Hover(mmPoints: TPointArray; radians: Double): Boolean;
function TRoomObject.Click(mmPoints: TPointArray; radians: Double): Boolean;
function TRoomObject.Select(options: TStringArray; mmPoints: TPointArray; radians: Double): Boolean;
```
Interacts with a {ref}`TRoomObject`. The interaction type is self explanatory.
*)
function TRoomObject.Hover(mmPoints: TPointArray; radians: Double): Boolean;
var
  i: Int32;
  tpa: TPointArray;
  atpa: T2DPointArray;
  cuboids: TCuboidExArray;
begin
  cuboids := Minimap.GetCuboidArrayMS(mmPoints, Self.Shape, [0,0], radians);

  for i := 0 to High(cuboids) do
  begin
    atpa := MainScreen.FindObject(Self.Finder, cuboids[i].Bounds());

    if atpa <> [] then
    begin
      tpa := atpa[0];
      Mouse.Move(tpa[Random(0, High(tpa))]);
      if MainScreen.IsUpText(Self.UpText) then
        Exit(True);
    end;
  end;
end;

function TRoomObject.Click(mmPoints: TPointArray; radians: Double): Boolean;
begin
  if not Self.Hover(mmPoints, radians) then
    Exit;
  Mouse.Click(MOUSE_LEFT);
  Result := MainScreen.DidRedClick();
end;

function TRoomObject.Select(options: TStringArray; mmPoints: TPointArray; radians: Double): Boolean;
begin
  Result := Self.Hover(mmPoints, radians) and ChooseOption.Select(options);
end;

