(*
POHHandler
==========
*)

{$DEFINE WL_POH_HANDLER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}


{$SCOPEDENUMS ON}
type

  ERSHouseRoom = (
    UNKNOWN, GARDEN, SUPERIOR_GARDEN, MENAGERIE_OPEN, MENAGERIE_CLOSED,
    STUDY_PARLOUR, KITCHEN_BEDROOM, ACHIEVEMENT_GALLERY, QUEST_NEXUS, COMBAT,
    COSTUME, ALTAR, PORTAL, WORKSHOP
  );

  ERSHouseRoomArray = array of ERSHouseRoom;
  E2DRSHouseRoomArray = array of ERSHouseRoomArray;

  TRoomObject = record
    UpText: String;
    Coordinates: TPointArray;
    Finder: TRSObjectFinder;
  end;

  TRoomObjectArray = array of TRoomObject;

  TRSPOHHandler = record
    AMOUNT, SIZE: Int32;
    RoomsMap, Map: TMufasaBitmap;
    RoomsBitmaps: array [ERSHouseRoom] of TMufasaBitmap;
    Rooms: E2DRSHouseRoomArray;
    RoomObjects: array [ERSHouseRoom] of TRoomObjectArray;
    GrassColor: Int32;
    Similarity: Double;
  end;
{$SCOPEDENUMS OFF}

procedure TRSPOHHandler.Free();
var
  room: ERSHouseRoom;
begin
  Self.Map.Free();
  Self.RoomsMap.Free();
  for room := ERSHouseRoom(0) to ERSHouseRoom(High(ERSHouseRoom)) do
    if Self.RoomsBitmaps[room] <> nil then
      Self.RoomsBitmaps[room].Free();
end;

procedure TRSPOHHandler.Init();
var
  i: Int32;
begin
  Self.SIZE := 32;
  Self.AMOUNT := 12;
  Self.Similarity := 0.9999;

  Self.Map.Init();
  Self.Map.SetSize(Self.SIZE * Self.AMOUNT, Self.SIZE * Self.AMOUNT);

  Self.RoomsMap.Init();
  Self.RoomsMap.LoadFromFile(WALKER_DIR + 'poh.png');
  SetLength(Self.Rooms, Self.AMOUNT);
  for i := 0 to High(Self.Rooms) do
    SetLength(Self.Rooms[i], Self.AMOUNT);

  AddOnTerminate(@Self.Free);
end;

function TRSPOHHandler.GetRoom(i: Int32): ERSHouseRoom;
begin
  Result := ERSHouseRoom((i div Self.SIZE) + 1);
end;

function TRSPOHHandler.GetRoomBox(room: ERSHouseRoom): TBox;
var
  i: Int32;
begin
  i := Ord(room)-1;
  Result := [i * Self.SIZE, 0, i * Self.SIZE + Self.SIZE - 1, Self.SIZE-1];
end;

function TRSPOHHandler.GetRoomBitmap(room: ERSHouseRoom; color: Int32 = -1): TMufasaBitmap;
var
  b: TBox;
begin
  if Self.RoomsBitmaps[room] = nil then
  begin
    b := Self.GetRoomBox(room);
    Result := Self.RoomsMap.Copy(b.X1, b.Y1, b.X2, b.Y2);
    Self.RoomsBitmaps[room] := Result.Copy();
  end
  else
    Result := Self.RoomsBitmaps[room].Copy();

  if color <> -1 then
    Result.ReplaceColor($FFFFFF, color);
end;



procedure TRSPOHHandler.WriteRoom(room: ERSHouseRoom; x, y: Int32);
begin
  if not InRange(x, 0, High(Self.Rooms)) then
    TerminateScript('x has to be between 0 and ' + ToStr(High(Self.Rooms)) + ', got: ' + ToStr(x));
  if not InRange(y, 0, High(Self.Rooms[0])) then
    TerminateScript('y has to be between 0 and ' + ToStr(High(Self.Rooms[0])) + ', got: ' + ToStr(y));

  Self.Rooms[y,x] := room;
end;

procedure TRSPOHHandler.WriteRoom(room: ERSHouseRoom; p: TPoint); overload;
begin
  Self.WriteRoom(room, p.X, p.Y);
end;

function TRSPOHHandler.ReadRoom(x, y: Int32): ERSHouseRoom;
begin
  if not InRange(x, 0, High(Self.Rooms)) then
    TerminateScript('x has to be between 0 and ' + ToStr(High(Self.Rooms)) + ', got: ' + ToStr(x));
  if not InRange(y, 0, High(Self.Rooms[0])) then
    TerminateScript('y has to be between 0 and ' + ToStr(High(Self.Rooms[0])) + ', got: ' + ToStr(y));

  Result := Self.Rooms[y,x];
end;

function TRSPOHHandler.ReadRoom(p: TPoint): ERSHouseRoom; overload;
begin
  Result := Self.ReadRoom(p.X, p.Y);
end;


procedure TRSPOHHandler.PrintRooms(); //for debugging...
var
  str: String;
  i, j: Int32;
begin
  str := '[' + LineEnding;
  for i := 0 to High(Self.Rooms) do
  begin
    for j := 0 to High(Self.Rooms[i]) do
    begin
      if j = 0 then
      begin
        str += '  [';
      end;
        str += ToStr(Self.Rooms[i][j]);
      if j < High(Self.Rooms[i]) then
        str += ', ';
    end;
      str += ', ' + LineEnding;
  end;
  str += ']';
  WriteLn str;
end;



procedure TRSPOHHandler.DrawMap(bmp: TMufasaBitmap; room: ERSHouseRoom; x, y: Int32);
begin
  Self.WriteRoom(room, x, y);
  Self.Map.DrawBitmap(bmp, [Self.SIZE * x, Self.SIZE * y]);
end;

procedure TRSPOHHandler.DrawMap(bmp: TMufasaBitmap; room: ERSHouseRoom; p: TPoint); overload;
begin
  Self.DrawMap(bmp, room, p.X, p.Y);
end;

procedure TRSPOHHandler.DrawMap(room: ERSHouseRoom; color: Int32; x, y: Int32); overload;
var
  bmp: TMufasaBitmap;
begin
  bmp := Self.GetRoomBitmap(room, color);
  Self.DrawMap(bmp, room, x, y);
  bmp.Free();
end;

procedure TRSPOHHandler.DrawMap(room: ERSHouseRoom; color: Int32; p: TPoint); overload;
begin
  Self.DrawMap(room, color, p.X, p.Y);
end;



function TRSPOHHandler.GetMappedRoom(p: TPoint): ERSHouseRoom;
begin
  Result := Self.ReadRoom(p.X div Self.SIZE, p.Y div Self.SIZE);
end;

function TRSPOHHandler.GetMappedRoomIndices(p: TPoint): TPoint;
begin
  Result := [p.X div Self.SIZE, p.Y div Self.SIZE];
end;

function TRSPOHHandler.GetMappedRoomTopLeft(p: TPoint): TPoint;
begin
  Result := [p.X div Self.SIZE * Self.SIZE, p.Y div Self.SIZE * Self.SIZE];
end;


function TRSPOHHandler.GetAdjacentRoomsMinimap(p: TPoint): TPointArray;
begin
  Result := [p.Offset(-32,0), p.Offset(32, 0), p.Offset(0, -32), p.Offset(0, 32)];
end;

function TRSPOHHandler.GetAdjacentRoomsIndices(p: TPoint): TPointArray;
begin
  Result := [p.Offset(-1,0), p.Offset(1, 0), p.Offset(0, -1), p.Offset(0, 1)];
end;


function TRSPOHHandler.GetMinimapRoomCoordinate(topLeft, p: TPoint; angle: Double; rotation: Int32): TPoint;
var
  roomCenter: TPoint;
begin
  if not InRange(p.X, 0, 32) or not InRange(p.Y, 0, 32) then
    TerminateScript(ToStr(p) + ' is not wthin the room you want to check.');

  Result := topLeft + p + [Minimap.X1(), Minimap.Y1()] - [10, 10];
  Result := Result.Rotate(angle, Minimap.Center());

  if rotation = 0 then
    Exit;

  roomCenter := topLeft + [16, 16] + [Minimap.X1(), Minimap.Y1()] - [10, 10];
  roomCenter := roomCenter.Rotate(angle, Minimap.Center());
  Result := Result.Rotate(PI/2 * rotation, roomCenter);
end;

function TRSPOHHandler.GetCuboid(topLeft, p: TPoint; tile: Vector3; angle: Double; rotation: Int32): TCuboidEx;
begin
  p := Self.GetMinimapRoomCoordinate(topLeft, p, angle, rotation);
  Result := Minimap.GetCuboidMS(p, tile);
end;

function TRSPOHHandler.ContainsPool(topLeft: TPoint; angle: Double; rotation: Int32): Boolean;
var
  cuboid: TCuboidEx;
  b: TBox;
begin
  cuboid := Self.GetCuboid(topLeft, [4,4], [1.5, 1.5, 6], angle, rotation);
  b := cuboid.Bounds();
  b.LimitTo(MainScreen.Bounds());
  Result := SRL.CountColor(CTS2(11514040, 19, 0.10, 0.13), b) > 10;
end;

function TRSPOHHandler.ContainsJewelleryBox(topLeft: TPoint; angle: Double; rotation: Int32): Boolean;
var
  cuboid: TCuboidEx;
  b: TBox;
begin
  cuboid := Self.GetCuboid(topLeft, [4,4], [2, 2, 6], angle, rotation);
  b := cuboid.Bounds();
  b.LimitTo(MainScreen.Bounds());
  (* ALTAR
  Result := (SRL.CountColor(CTS2(12307635, 19, 1.36, 0.91), b) +
            SRL.CountColor(CTS2(7575724, 13, 0.04, 0.79), b)) > 10;
  *)
  Result := (SRL.CountColor(CTS2(1287353, 17, 0.02, 0.72), b) +
            SRL.CountColor(CTS2(530791, 8, 0.24, 2.28), b)) > 10;
end;


function TRSPOHHandler.RotateRoom(bitmap: TMufasaBitmap; rotation: Int32): TMufasaBitmap;
var
  p: TPoint;
begin
  if rotation = 0 then
    Exit(bitmap.Copy());

  bitmap.Pad(1);
  Result.Init();
  bitmap.RotateBitmap(PI/2*rotation, Result);

  for p.X := 0 to 3 do
    for p.Y := 0 to 3 do
      if Result.GetPixel(p.X, p.Y) <> 0 then
        Break(2);

  Result.Crop(p.X, p.Y, p.X + 31, p.Y + 31);
end;

procedure TRSPOHHandler.MapAdjacentRooms(minimapBMP: TMufasaBitmap; topLeft, currentRoom: TPoint; angle: Double);
const
  FLOOR_COLOR_OFFSETS: TPointArray = [[5,5], [26,5], [26,26], [5, 26]];
var
  minimapTPA, localTPA: TPointArray;
  p: TPoint;
  crop, sample, rotated, bestBMP: TMufasaBitmap;
  i, j, floor, r: Int32;
  colors: TIntegerArray;
  bestRoom: ERSHouseRoom;
  matrix: TSingleMatrix;
  match, bestMatch: Single;
  hasCoreObject: Boolean;
begin
  localTPA := Self.GetAdjacentRoomsIndices(currentRoom);
  minimapTPA := Self.GetAdjacentRoomsMinimap(topLeft);

  for i := 0 to High(minimapTPA) do
  begin
    p := minimapTPA[i];
    if Self.ReadRoom(localTPA[i]) <> ERSHouseRoom.UNKNOWN then
      Continue;

    crop := minimapBMP.Copy(p.X, p.Y, p.X + Self.SIZE-1, p.Y + Self.SIZE-1);

    colors := crop.GetPixels(FLOOR_COLOR_OFFSETS);
    floor := colors.GetMostCommon();

    for j := 1 to Ord(High(ERSHouseRoom)) do
    begin
      case j of
        0..3: if floor <> Self.GrassColor then Continue; //Gardens or OpenMenagerie
        else  if floor = Self.GrassColor then Continue;
      end;

      sample := Self.GetRoomBitmap(ERSHouseRoom(j), floor);
      for r := 0 to 3 do
      begin
        rotated := Self.RotateRoom(sample, r);
        (*
        WriteLn ERSHouseRoom(j);
        rotated.Debug();
        Wait(500);
        *)

        case j of
          2: hasCoreObject := Self.ContainsPool(p, angle, r);
          7: hasCoreObject := Self.ContainsJewelleryBox(p, angle, r);
        end;

        matrix := crop.MatchTemplate(rotated, TM_CCOEFF_NORMED);
        match := matrix.Max();
        if hasCoreObject then
          match += 0.2;

        if match > bestMatch then
        begin
          if bestBMP <> nil then
            bestBMP.Free();

          bestBMP := rotated;
          bestMatch := match;
          bestRoom := ERSHouseRoom(j);
          Continue;
        end;

        rotated.Free();

        if bestMatch >= Self.Similarity then
          Break(2);
      end;
    end;

    crop.Free();
    if bestMatch > 0.3 then
    begin
      Self.DrawMap(bestBMP, bestRoom, localTPA[i]);
      bestMatch := 0;
    end;
  end;
  bestBMP.Free();
end;


function TRSPOHHandler.GetCleanMinimap(out angle: Double): TMufasaBitmap; static;
var
  bitmap: TMufasaBitmap;
begin
  bitmap := GetMufasaBitmap(BitmapFromClient(Minimap.Bounds()));
  bitmap.ReplaceColor(0, 1); // We need zero to be unique

  TRSWalker.CleanMinimap(Bitmap);

  Result.Init();
  angle := Minimap.GetCompassAngle(False);
  bitmap.RotateBitmapEx(angle, False, True, Result);
  bitmap.Free();
end;

function TRSPOHHandler.GetCleanMinimap(): TMufasaBitmap; static; overload;
var
  angle: Double;
begin
  Result := TRSPOHHandler.GetCleanMinimap(angle);
end;

procedure TRSPOHHandler.Setup();
var
  minimapBMP: TMufasaBitmap;
  center, topLeft: TPoint;
  angle: Double;
begin
  minimapBMP := TRSPOHHandler.GetCleanMinimap(angle);
  center := minimapBMP.getCenter();
  Self.GrassColor := minimapBMP.GetPixel(center.X, center.Y);
  minimapBMP.ReplaceColor(1, Self.GrassColor);

  Self.Map.ReplaceColor(0, Self.GrassColor);

  Self.DrawMap(ERSHouseRoom.GARDEN, Self.GrassColor, Self.AMOUNT div 2, Self.AMOUNT div 2);
  topLeft := center.Offset(-14, -10);
  Self.MapAdjacentRooms(minimapBMP, topLeft, [Self.AMOUNT div 2, Self.AMOUNT div 2], angle);

  minimapBMP.Free();
end;


function TRSPOHHandler.MapToMM(p, handlerPoint: TPoint; radians: Double): TPoint;
begin
  Result := handlerPoint - p + Minimap.Center();
  Result := Result.Rotate(radians, Minimap.Center());
end;


procedure TRSPOHHandler.LoadSuroundings(minimapBMP: TMufasaBitmap; p: TPoint; angle: double);
var
  topLeft: TPoint;
begin
  topLeft := p - Self.GetMappedRoomTopLeft(p);
  topLeft := minimapBMP.getCenter() - topLeft - [1,0];
  Self.MapAdjacentRooms(minimapBMP, topLeft, Self.GetMappedRoomIndices(p), angle);
end;


function TRSPOHHandler.SampleSearch(minimapBMP: TMufasaBitmap; sampleSize: Int32 = 50; sampleAmount: Int32 = 3): TPoint;
var
  sampleSM, sampleLG: TMufasaBitmap;
  offset: TPoint;
  b: TBox;
  matrixSM, matrixLG: TSingleMatrix;
  resultSM, resultLG: TPointArray;
  i, s: Int32;
begin
  s := 20;
  offset := minimapBMP.getCenter().Offset(2, 5);
  b := Box(offset, s, s);
  sampleSM := minimapBMP.Copy(b.X1, b.Y1, b.X2, b.Y2);
  b := Box(offset, sampleSize, sampleSize);
  sampleLG := minimapBMP.Copy(b.X1, b.Y1, b.X2, b.Y2);

  matrixSM := Self.Map.MatchTemplate(sampleSM, TM_CCOEFF_NORMED);
  matrixLG := Self.Map.MatchTemplate(sampleLG, TM_CCOEFF_NORMED);

  sampleSM.Free();
  sampleLG.Free();

  for i := 1 to sampleAmount do
  begin
    with matrixSM.ArgMax() do
    begin
      resultSM += [X - (sampleSize - s), Y - (sampleSize - s)];
      matrixSM.Fill([X - 5, Y - 5, X + 5, Y + 5], 0);
    end;

    with matrixLG.ArgMax() do
    begin
      resultLG += [X, Y];
      matrixLG.Fill([X - 5, Y - 5, X + 5, Y + 5], 0);
    end;

    if resultSM[i-1] = resultLG[i-1] then
      Break;
  end;

  for i := 0 to High(resultSM) do
    if resultSM[i].WithinDistance(resultLG[i], 5) then
      Exit(resultLG[i]);

  Result := resultSM[0];
end;

function TRSPOHHandler.GetPos(): TPoint;
const
  SAMPLE_SIZE: Int32 = 50;
var
  minimapBMP: TMufasaBitmap;
  angle: Double;
begin
  minimapBMP := TRSPOHHandler.GetCleanMinimap(angle);
  minimapBMP.ReplaceColor(1, Self.GrassColor);

  Result := Self.SampleSearch(minimapBMP, SAMPLE_SIZE);
  Result := Result.Offset(SAMPLE_SIZE - 3, SAMPLE_SIZE - 5);
  Self.LoadSuroundings(minimapBMP, Result, angle);
  minimapBMP.Free();
end;

procedure TRSPOHHandler.DebugPos();
const
  SAMPLE_SIZE: Int32 = 50;
var
  minimapBMP, display: TMufasaBitmap;
  p: TPoint;
  angle: Double;
begin
  minimapBMP := TRSPOHHandler.GetCleanMinimap(angle);
  minimapBMP.ReplaceColor(1, Self.GrassColor);

  p := Self.SampleSearch(minimapBMP, SAMPLE_SIZE);
  p := p.Offset(SAMPLE_SIZE - 3, SAMPLE_SIZE - 5);

  Self.LoadSuroundings(minimapBMP, p, angle);

  display.Init();
  display.SetSize(Self.Map.getWidth() + minimapBMP.getWidth() + 300, Self.Map.getHeight());

  display.DrawBitmap(Self.Map, [0,0]);
  display.setFontAntialiasing(True);
  display.DrawText('MAP', [10, 10], $FFFFFF);
  display.setFontSize(14);
  display.DrawText('Minimap sample:', [Self.Map.getWidth()+10, 0], $FFFFFF);
  display.DrawBitmap(minimapBMP, [Self.Map.getWidth()+1, 20]);

  display.setFontSize(10);
  display.DrawText('Pos:' + ToStr(p), [Self.Map.getWidth()+10, minimapBMP.getHeight() + 40], $FFFFFF);

  display.DrawCrosshairs(p, 1, $FFFFFF);
  display.Debug();

  minimapBMP.Free();
  display.Free();
end;

function TRSPOHHandler.GetCurrentRoom(): ERSHouseRoom;
begin
  Result := Self.GetMappedRoom(Self.GetPos());
end;


var
  POHHandler: TRSPOHHandler;

procedure TSRL.Setup(); override;
begin
  inherited;

  POHHandler.Init();
end;


(*
begin
  ClearDebug();
  POHHandler.Setup();
  while True do
    POHHandler.DebugPos();
end;
*)
