(*
FairyRing
=========
*)

{$DEFINE WL_FAIRYRING_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  ERSFairyRingWheel = (LEFT, MIDDLE, RIGHT);
  TRSFairyRing = record (TRSInterface)
    Wheels: array [ERSFairyRingWheel] of String;
  end;

(*
FairyRing.Setup
~~~~~~~~~~~~~~~
.. pascal:: procedure FairyRing.Setup();

Initializes TRSFairyRing variables.

.. note:: This is automatically called on the **FairyRing** variable.
*)
procedure TRSFairyRing.Setup(); override;
begin
  inherited;

  Self.Name := 'FairyRing';
  Self.Wheels[ERSFairyRingWheel.LEFT] := 'adcb';
  Self.Wheels[ERSFairyRingWheel.MIDDLE] := 'ilkj';
  Self.Wheels[ERSFairyRingWheel.RIGHT] := 'psrq';
end;

procedure TRSFairyRing.SetupAlignment(mode: ERSClientMode); override;
begin
  Self.Mode := mode;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 500;
        Self.Alignment.Center.MaxHeight := 320;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, 2];
        Self.Alignment.Bottom := [@InterfaceArea.Y2, -2];
        Self.Alignment.Center.MaxWidth := 500;
        Self.Alignment.Center.MaxHeight := 320;
      end;
  end;
end;

(*
FairyRing.IsOpen
~~~~~~~~~~~~~~~~
.. pascal::
  function TRSFairyRing.IsOpen(): Boolean;

Returns true/false whether the FairyRing interface is open or not.

Example
-------

 WriteLn FairyRing.IsOpen();
*)
function TRSFairyRing.IsOpen(): Boolean;
begin
  Result := InRange(SRL.CountColor(CTS2(3949742, 14, 0.03, 0.70), Self.Bounds()), 18000, 19000);
end;

(*
FairyRing.Close
~~~~~~~~~~~~~~~
.. pascal::
  function TRSFairyRing.Close(pressEscape: Boolean): Boolean;
  function TRSFairyRing.Close(chance: Double = BioHash): Boolean; overload;

Closes the FairyRing interface, depending on `pressEscape` the function will either click the button
or press escape.

Example
-------

 WriteLn FairyRing.Close();
*)
function TRSFairyRing.Close(pressEscape: Boolean): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);
  Result := MainScreen.ClickCloseButton(pressEscape);
end;

function TRSFairyRing.Close(chance: Double = BioHash): Boolean; overload;
begin
  Result := MainScreen.CloseInterface(chance);
end;


function TRSFairyRing.GetWheels(): TBoxArray;
begin
  Result := Grid(3, 1, 159, 159, [11, 0], [Self.X1()+2, Self.Y1()+75]);
  Result[2].X1 -= 2;
  Result[2].X2 -= 2;
end;

function TRSFairyRing.GetWheel(wheel: ERSFairyRingWheel): TBox;
begin
  Result := Self.GetWheels()[Ord(wheel)];
end;


function TRSFairyRing.GetLetterBox(wheel: ERSFairyRingWheel): TBox;
begin
  Result := Self.GetWheel(wheel);
  Result.X1 += 60;
  Result.Y1 += 115;
  Result.X2 -= 60;
  Result.Y2 -= 10;
end;

function TRSFairyRing.GetLetter(wheel: ERSFairyRingWheel): Char;
begin
  case SRl.CountColor(CTS2(6107727, 4, 0.49, 2.05), Self.GetLetterBox(wheel)) of
    52 : Result := 'l';
    63 : Result := 'q';
    65 : Result := 'i';
    66 : Result := 'j';
    80 : Result := 'c';
    81 : Result := 'r';
    85 : Result := 'p';
    98 : Result := 'k';
    100: Result := 's';
    125: Result := 'b';
    172: Result := 'a';
    198: Result := 'd';
    else Result := 'n'; //n for null
  end;
end;

function TRSFairyRing.GetCombination(): String;
begin
  Result := Self.GetLetter(ERSFairyRingWheel.LEFT) +
            Self.GetLetter(ERSFairyRingWheel.MIDDLE) +
            Self.GetLetter(ERSFairyRingWheel.RIGHT);
end;


function TRSFairyRing.GetLeftRotationBox(wheel: ERSFairyRingWheel): TBox;
begin
  Result := Self.GetWheel(wheel);
  Result.X2 -= 80;
end;

function TRSFairyRing.GetRightRotationBox(wheel: ERSFairyRingWheel): TBox;
begin
  Result := Self.GetWheel(wheel);
  Result.X1 += 80;
end;


function TRSFairyRing.SpinLeft(wheel: ERSFairyRingWheel): Boolean;
var
  c, tmp: Char;
begin
  Result := Self.IsOpen();
  if Result then
  begin
    c := Self.GetLetter(wheel);
    Mouse.Click(Self.GetLeftRotationBox(wheel), MOUSE_LEFT);
    Result := WaitUntil((c <> (tmp := Self.GetLetter(wheel))) and (tmp <> 'n'), 300, 5000);
  end;
end;

function TRSFairyRing.SpinRight(wheel: ERSFairyRingWheel): Boolean;
var
  c, tmp: Char;
begin
  Result := Self.IsOpen();
  if Result then
  begin
    c := Self.GetLetter(wheel);
    Mouse.Click(Self.GetRightRotationBox(wheel), MOUSE_LEFT);
    Result := WaitUntil((c <> (tmp := Self.GetLetter(wheel))) and (tmp <> 'n'), 300, 5000);
  end;
end;





function TRSFairyRing.GetTeleportButton(): TBox;
begin
  Result := Self.Bounds();
  Result.X1 += 166;
  Result.Y1 += 247;
  Result.X2 -= 165;
  Result.Y2 -= 20;
end;


procedure TRSFairyRing.Draw(bitmap: TMufasaBitmap); override;
var
  wheel: ERSFairyRingWheel;
  b: TBox;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  bitmap.DrawBoxes(Self.GetWheels(), $00FFFF);
  for wheel := ERSFairyRingWheel.LEFT to ERSFairyRingWheel.RIGHT do
  begin
    b := Self.GetLeftRotationBox(wheel).Expand(-1);
    bitmap.DrawBox(b, $00FF00);
    b := Self.GetRightRotationBox(wheel).Expand(-1);
    bitmap.DrawBox(b, $0000FF);
  end;

  bitmap.DrawBox(Self.GetTeleportButton(), $00FFFF);
end;

(*
var FairyRing
~~~~~~~~~~~~~
  Global FairyRing variable.
*)
var
  FairyRing: TRSFairyRing;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;

  FairyRing.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup(); override;
begin
  inherited;

  FairyRing.Setup();
end;

procedure TSRL.Debug(bitmap: TMufasaBitmap); override;
begin
  inherited;

  FairyRing.Draw(bitmap);
end;

function TRSMainScreen.IsVisible(p: TPoint): Boolean; override;
begin
  Result := inherited;

  if not Result or (RSClient.Mode = ERSClientMode.FIXED) then
    Exit;

  if FairyRing.Bounds().Expand(5).Contains(p) and FairyRing.IsOpen() then
    Exit(False);
end;

function TRSMainScreen.IsVisible(tpa: TPointArray; useCenter: Boolean = True): Boolean; override;
begin
  Result := inherited;
  if FairyRing.IsOpen() then
    Exit(False);
end;
