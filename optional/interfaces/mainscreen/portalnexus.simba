(*
# PortalNexus
Portal Nexus interface by Reldnahc.
*)

{$DEFINE RELD_PORTAL_NEXUS_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  ERSPortalNexusDestinations = (
    PORTAL_NEXUS_ANNAKARL,
    PORTAL_NEXUS_APE_ATOLL_DUNGEON,
    PORTAL_NEXUS_ARCEUUS_LIBRARY,
    PORTAL_NEXUS_EAST_ARDOUGNE,
    PORTAL_NEXUS_BARROWS,
    PORTAL_NEXUS_BATTLEFRONT,
    PORTAL_NEXUS_CAMELOT,
    PORTAL_NEXUS_SEERS_VILLAGE,
    PORTAL_NEXUS_CARRALLANGER,
    PORTAL_NEXUS_CATHERBY,
    PORTAL_NEXUS_FORGOTTEN_CEMETERY,
    PORTAL_NEXUS_DRAYNOR_MANOR,
    PORTAL_NEXUS_FALADOR,
    PORTAL_NEXUS_FENKENSTRAINS_CASTLE,
    PORTAL_NEXUS_FISHING_GUILD,
    PORTAL_NEXUS_GHORROCK,
    PORTAL_NEXUS_HARMONY_ISLAND,
    PORTAL_NEXUS_MARIM,
    PORTAL_NEXUS_SENNTISTEN,
    PORTAL_NEXUS_KHARYRLL,
    PORTAL_NEXUS_KOUREND_CASTLE,
    PORTAL_NEXUS_LUMBRIDGE,
    PORTAL_NEXUS_MIND_ALTAR,
    PORTAL_NEXUS_LUNAR_ISLE,
    PORTAL_NEXUS_SALVE_GRAVEYARD,
    PORTAL_NEXUS_VARROCK,
    PORTAL_NEXUS_GRAND_EXCHANGE,
    PORTAL_NEXUS_TROLL_STRONGHOLD,
    PORTAL_NEXUS_WATCHTOWER,
    PORTAL_NEXUS_YANILLE,
    PORTAL_NEXUS_WATERBIRTH_ISLAND,
    PORTAL_NEXUS_WEISS,
    PORTAL_NEXUS_WEST_ARDOUGNE
  );

  TPortalNexusDestination = record
    Destination: String;
    HotKey: UInt64;
  end;

  TRSPortalNexus = record (TRSTitledInterface)
    Destinations: array [ERSPortalNexusDestinations] of TPortalNexusDestination;
  end;

function TRSPortalNexus.ScrollAreaFunction(): TBox;
begin
  Result := Box(Self.Bounds().X1 + 29, Self.Bounds().Y1 + 49, Self.Bounds().X2 - 197, Self.Bounds().Y2 - 20);
end;

procedure TRSPortalNexus.Setup(); override;
begin
  inherited;
  Self.Name := 'Portal Nexus';
  Self.GetScrollAreaFunction := @Self.ScrollAreaFunction;

  Self.Destinations[PORTAL_NEXUS_ANNAKARL].Destination              := "Annakarl";
  Self.Destinations[PORTAL_NEXUS_APE_ATOLL_DUNGEON].Destination     := "Ape Atoll Dungeon";
  Self.Destinations[PORTAL_NEXUS_ARCEUUS_LIBRARY].Destination       := "Arceuus Library";
  Self.Destinations[PORTAL_NEXUS_EAST_ARDOUGNE].Destination         := "Ardougne";
  Self.Destinations[PORTAL_NEXUS_BARROWS].Destination               := "Barrows";
  Self.Destinations[PORTAL_NEXUS_BATTLEFRONT].Destination           := "Battlefront";
  Self.Destinations[PORTAL_NEXUS_CAMELOT].Destination               := "Camelot";
  Self.Destinations[PORTAL_NEXUS_SEERS_VILLAGE].Destination         := "Seers' Village";
  Self.Destinations[PORTAL_NEXUS_CARRALLANGER].Destination          := "Carrallanger";
  Self.Destinations[PORTAL_NEXUS_CATHERBY].Destination              := "Catherby";
  Self.Destinations[PORTAL_NEXUS_FORGOTTEN_CEMETERY].Destination    := "Cemetery";
  Self.Destinations[PORTAL_NEXUS_DRAYNOR_MANOR].Destination         := "Draynor Manor";
  Self.Destinations[PORTAL_NEXUS_FALADOR].Destination               := "Falador";
  Self.Destinations[PORTAL_NEXUS_FENKENSTRAINS_CASTLE].Destination  := "Fenken' Castle";
  Self.Destinations[PORTAL_NEXUS_FISHING_GUILD].Destination         := "Fishing Guild";
  Self.Destinations[PORTAL_NEXUS_GHORROCK].Destination              := "Ghorrock";
  Self.Destinations[PORTAL_NEXUS_HARMONY_ISLAND].Destination        := "Harmony Island";
  Self.Destinations[PORTAL_NEXUS_MARIM].Destination                 := "Marim";
  Self.Destinations[PORTAL_NEXUS_SENNTISTEN].Destination            := "Senntisten";
  Self.Destinations[PORTAL_NEXUS_KHARYRLL].Destination              := "Kharyrll";
  Self.Destinations[PORTAL_NEXUS_KOUREND_CASTLE].Destination        := "Kourend Castle";
  Self.Destinations[PORTAL_NEXUS_LUMBRIDGE].Destination             := "Lumbridge";
  Self.Destinations[PORTAL_NEXUS_MIND_ALTAR].Destination            := "Mind Altar";
  Self.Destinations[PORTAL_NEXUS_LUNAR_ISLE].Destination            := "Lunar Isle";
  Self.Destinations[PORTAL_NEXUS_SALVE_GRAVEYARD].Destination       := "Salve Graveyard";
  Self.Destinations[PORTAL_NEXUS_VARROCK].Destination               := "Varrock";
  Self.Destinations[PORTAL_NEXUS_GRAND_EXCHANGE].Destination        := "Grand Exchange";
  Self.Destinations[PORTAL_NEXUS_TROLL_STRONGHOLD].Destination      := "Troll Stronghold";
  Self.Destinations[PORTAL_NEXUS_WATCHTOWER].Destination            := "Watchtower";
  Self.Destinations[PORTAL_NEXUS_YANILLE].Destination               := "Yanille";
  Self.Destinations[PORTAL_NEXUS_WATERBIRTH_ISLAND].Destination     := "Waterbirth Island";
  Self.Destinations[PORTAL_NEXUS_WEISS].Destination                 := "Weiss";
  Self.Destinations[PORTAL_NEXUS_WEST_ARDOUGNE].Destination         := "West Ardougne";

end;


function TRSPortalNexus.StringToVk(str: String): UInt64;
begin
  case str of
    '1': Exit(VK_1);
    '2': Exit(VK_2);
    '3': Exit(VK_3);
    '4': Exit(VK_4);
    '5': Exit(VK_5);
    '6': Exit(VK_6);
    '7': Exit(VK_7);
    '8': Exit(VK_8);
    '9': Exit(VK_9);
    'A': Exit(VK_A);
    'B': Exit(VK_B);
    'C': Exit(VK_C);
    'D': Exit(VK_D);
    'E': Exit(VK_E);
    'F': Exit(VK_F);
    'G': Exit(VK_G);
    'H': Exit(VK_H);
    'I': Exit(VK_I);
    'J': Exit(VK_J);
    'K': Exit(VK_K);
    'L': Exit(VK_L);
    'M': Exit(VK_M);
    'N': Exit(VK_N);
    'O': Exit(VK_O);
    'P': Exit(VK_P);
    'Q': Exit(VK_Q);
    'R': Exit(VK_R);
    'S': Exit(VK_S);
    'T': Exit(VK_T);
    'U': Exit(VK_U);
    'V': Exit(VK_V);
    'W': Exit(VK_W);
    'X': Exit(VK_X);
    'Y': Exit(VK_Y);
    'Z': Exit(VK_Z);
  end;
end;

(*
## TRSPortalNexus.ClickPortalDestination
```pascal

function TRSPortalNexus.ClickPortalDestination(destination: ERSPortalNexusDestinations, useKeyboard : Boolean = False): Boolean;
```

Finds the destination in the scroll area and clicks it.

Example:
```pascal
 WriteLn TRSPortalNexus.ClickPortalDestination(PORTAL_DESTINATION_FALADOR);
```
*)
function TRSPortalNexus.ClickPortalDestination(destination: ERSPortalNexusDestinations; useKeyboard : Boolean = False): Boolean;
var
  box: TBox;
begin
  if useKeyboard and Self.FindPortalDestination(destination, box) then
  begin
    KeyBoard.PressKey(Self.Destinations[destination].HotKey);
    KeyBoard.KeyUp(Self.Destinations[destination].HotKey);
    Result := True;
  end
  else if Self.FindPortalDestination(destination, box) then
  begin
    Mouse.Move(box);
    Mouse.Click(MOUSE_LEFT);
    Result := True;
  end;
end;

(*
## TRSPortalNexus.FindPortalDestinations
```pascal
function TRSPortalNexus.FindPortalDestinations(out boxes: TBoxArray): TStringArray;
```

Returns the visible destinations in the portal nexus interface.

Example:
```pascal
 WriteLn TRSPortalNexus.FindPortalDestinations();
```
*)
function TRSPortalNexus.FindPortalDestinations(out boxes: TBoxArray): TStringArray; overload;
const
  COLORS := [2004990, 1803744];
  HOTKEYCOLORS := [14737632, 16711422];
var
  tpa: TPointArray;
  atpa: T2DPointArray;
  i, tmp: Int32;
  str: String;
  destination: ERSPortalNexusDestinations;
begin
  if SRL.FindColors(tpa, CTS0(1937135, 15), Self.ScrollAreaFunction() ) = 0 then
    Exit;

  atpa := tpa.Cluster(11, 1);
  atpa.SortByY();

  boxes := atpa.ToTBA();
  for i := 0 to High(boxes) do
  begin
    boxes[i].Y1 := boxes[i].Y1 - 3;
    boxes[i].Y2 := boxes[i].Y2 + 3;
    boxes[i].X1 := boxes[i].X1 - 15;
    boxes[i].X2 := boxes[i].X2 + 10;

    str := OCR.Recognize(boxes[i], TOCRColorFilter.Create(COLORS), RS_FONT_PLAIN_12);

    for destination in ERSPortalNexusDestinations do
    begin
      if str.Contains(Self.Destinations[destination].Destination) then
      begin
        if (Self.Destinations[destination].HotKey = 0) then
          Self.Destinations[destination].HotKey := Self.StringToVK(OCR.Recognize(boxes[i], TOCRColorFilter.Create(HOTKEYCOLORS), RS_FONT_PLAIN_12));
        Break;
      end;
    end;

    Result += str.After(': ');
  end;
end;

(*
## TRSPortalNexus.FindPortalDestination
```pascal
function TRSPortalNexus.FindPortalDestination(destination: ERSPortalNexusDestinations; out b: TBox): Boolean;
function TRSPortalNexus.FindPortalDestination(destination: ERSPortalNexusDestinations): Boolean; overload;
```

Finds the destination specified in the portal nexus.

Example:
```pascal
 WriteLn TRSPortalNexus.FindPortalDestination(PORTAL_NEXUS_FALADOR);
```
*)
function TRSPortalNexus.FindPortalDestination(destination: ERSPortalNexusDestinations; out b: TBox): Boolean;
  function _DoScrolling(destination: ERSPortalNexusDestinations; direction: Boolean; out b: TBox): Boolean;
  var
    limit, i: Int32;
    boxes: TBoxArray;
  begin
    if direction then
      limit := 100;

    Mouse.Move(Self.ScrollAreaFunction(), True);
    while Self.CanScroll() and (Self.GetScrollPosition() <> limit) do
    begin
      Mouse.Scroll(Antiban.GetUniqueInt(4, 2, 7), direction);
      i := Self.FindPortalDestinations(boxes).Find(Self.Destinations[destination].Destination);
      if i > -1 then
      begin
        b := boxes[i];
        Exit(True);
      end;
      Antiban.BioWait(150, 300);
    end;
  end;

var
  i, scroll: Int32;
  direction: Boolean;
  boxes: TBoxArray;
begin

  i := Self.FindPortalDestinations(boxes).Find(Self.Destinations[destination].Destination);
  if i > -1 then
  begin
    b := boxes[i];
    Exit(True);
  end;

  scroll := Self.GetScrollPosition();
  direction := InRange(scroll, 0, 3);
  if not direction then
    direction := not InRange(scroll, 97, 100) and Antiban.BioDice();

  if _DoScrolling(destination, direction, b) then
    Exit(True);

  if InRange(scroll, 0, 3) or InRange(scroll, 97, 100) then
    Exit; //scrolled everything and was not found.

  Result := _DoScrolling(destination, not direction, b);
end;

function TRSPortalNexus.FindPortalDestination(destination: ERSPortalNexusDestinations): Boolean; overload;
var
  b: TBox;
begin
  Result := Self.FindPortalDestination(destination, b);
end;

procedure TRSPortalNexus.SetupAlignment(mode: ERSClientMode); override;
begin
  inherited;

  case mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 490;
        Self.Alignment.Center.MaxHeight := 315;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, -1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 490;
        Self.Alignment.Center.MaxHeight := 315;
      end;
  end;
end;

function TRSPortalNexus.IsOpen(): Boolean;
begin
  Result := Self.IsTitle(Self.Name);
end;

function TRSPortalNexus.IsOpen(waitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), waitTime);
end;

function TRSPortalNexus.Close(pressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(pressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

var
 PortalNexus : TRSPortalNexus;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;

  PortalNexus.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup(); override;
begin
  inherited;

  PortalNexus.Setup();
end;
