(*
# Anvil
Anvil interface.
*)

{$DEFINE WL_ANVIL_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  ERSAnvilButton = (
    QUANTITY_ONE,
    QUANTITY_FIVE,
    QUANTITY_TEN,
    QUANTITY_X,
    QUANTITY_UNSET,
    QUANTITY_ALL,
    QUANTITY_CUSTOM
  );

  TRSAnvil = type TRSTitledInterface;

(*
## Anvil.GetSlots
```pascal
function TRSAnvil.GetSlots: TBoxArray;
```

Returns the all available anvil slots.

Example:
```pascal
Debug(Anvil.GetSlots());
```
*)
function TRSAnvil.GetSlots(): TBoxArray;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  Area: TBox;
  i: Int32;
begin
  Area := Self.Bounds;
  Area.Y1 += 30;           //Excludes the title bar
  Area.X2 := Area.X2 - 50; //Excludes the quantity buttons


  if SRL.FindColors(TPA, CTS0(65280), Area) then
    ATPA += TPA;
  if SRL.FindColors(TPA, CTS0(2070783), Area) then
    ATPA += TPA;

  TPA := ATPA.Merge;

  if TPA = [] then
    Exit;

  Result := TPA.Cluster(10).ToTBA;
  for i := 0 to High(Result) do
  begin
    Result[i].X1 -= 1;
    Result[i].Y1 -= 44;
    Result[i].X2 := Result[i].X1 + 50;
    Result[i].Y2 += 3;
  end;

  Result.SortByXY;
end;

(*
## Anvil.Setup
```pascal
procedure Anvil.Setup;
```

Initializes Anvil variables.

```{note}
This is automatically called on the **Anvil** variable.
```
*)
procedure TRSAnvil.Setup(); override;
begin
  inherited;

  Self.Name := 'Anvil';

  Self.ButtonColors := [CTS1(1052431, 26)];
  Self.ButtonEnabledColors := [CTS1(16777215, 0)];

  Self.ItemInterface.Name := Self.Name + '.ItemInterface';
  Self.ItemInterface.GetSearchBoxesFunction := @Self.GetSlots;
end;

procedure TRSAnvil.SetupAlignment(Mode: ERSClientMode); override;
begin
  Self.Mode := Mode;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, 2];
        Self.Alignment.Bottom := [@InterfaceArea.Y2, -1];
        Self.Alignment.Center.MaxWidth := 500;
        Self.Alignment.Center.MaxHeight := 320;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, 2];
        Self.Alignment.Bottom := [@InterfaceArea.Y2, -2];
        Self.Alignment.Center.MaxWidth := 500;
        Self.Alignment.Center.MaxHeight := 320;
      end;
  end;
end;


function TRSAnvil.GetButtons(): TRSButtonArray;
begin
  Result := FindButtons([[37, 37]]);
end;

function TRSAnvil.GetButton(button: ERSAnvilButton): TRSButton;
var
  buttons: TRSButtonArray;
  b: TRSButton;
  textArray: TStringArray;
  foundString: String;
begin
  buttons := Self.GetButtons();
  if buttons = [] then
    Exit;

  textArray := ['1', '5', '10', 'X', '?', 'All'];

  if button <> ERSAnvilButton.QUANTITY_CUSTOM then
  begin
    for b in Buttons do
      if b.FindText(textArray[Ord(button)], RS_FONT_PLAIN_11, [$FFFFFF, $1F98FF]) then
        Exit(b);
    Exit;
  end;

  b := Buttons[High(Buttons)];
  if not b.FindText([], RS_FONT_PLAIN_11, foundString) then
    Exit(b);
end;


function TRSAnvil.GetSlot(Slot: Int32): TBox;
var
  Slots: TBoxArray := Self.GetSlots;
begin
  if Slot <= Length(Slots) then
    Result := Slots[Slot];
end;

function TRSAnvil.GetItemSlot(Slot: Int32): TBox;
var
  B: TBox := Self.GetSlot(Slot);
begin
  if B = [] then Exit;

  Result := [B.X1 + 4, B.Y1, B.X2 - 12, B.Y2 - 22];
end;


(*
## Anvil.IsOpen
```pascal
function TRSAnvil.IsOpen(): Boolean;
function TRSAnvil.IsOpen(waitTime: Int32; interval: Int32 = -1): Boolean; overload;
```

Returns true/false whether the anvil interface is open or not.

Example:
```pascal
 WriteLn Anvil.IsOpen();
```
*)
function TRSAnvil.IsOpen(): Boolean;
begin
  Result := MainScreen.IsClassicOpen and
            (SRL.CountColor(CTS0(65280, 0), Self.Bounds) >= 300);
end;

function TRSAnvil.IsOpen(waitTime: Int32; interval: Int32 = -1): Boolean; overload;
begin
  if (interval = -1) then
    interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.IsOpen(), interval, waitTime);
end;


(*
## Anvil.Close
```pascal
function TRSAnvil.Close(pressEscape: Boolean): Boolean;
function TRSAnvil.Close(chance: Double = BioHash): Boolean; overload;
```

Closes the anvil interface, depending on `pressEscape` the function will either click the button
or press escape.

Example:
```pascal
 WriteLn Anvil.Close;
```
*)
function TRSAnvil.Close(pressEscape: Boolean): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := MainScreen.CloseInterface(pressEscape);
end;

function TRSAnvil.Close(chance: Double = BioHash): Boolean; overload;
begin
  Result := MainScreen.CloseInterface(chance);
end;


function TRSAnvil.ClickSlot(slot: Int32; forceClick: Boolean = False): Boolean;
const
  AVAILABLE = $FFFFFF;
begin
  if not Self.IsOpen() then
    Exit;

  if forceClick or (CountColor(AVAILABLE, Self.GetSlot(slot)) > 0) then
  begin
    Mouse.Click(Self.GetItemSlot(slot), MOUSE_LEFT);
    Result := WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
  end;
end;


function TRSAnvil.SmithSlot(slot: Int32; quantity: ERSAnvilButton): Boolean;
begin
  Result := Self.GetButton(quantity).Enable() and Self.ClickSlot(slot);
end;

function TRSAnvil.FindItem(item: TRSItem; out slot: Int32): Boolean;
begin
  slot := Self.ItemInterface.IndexOf([item]);
  Result := slot > -1;
end;

function TRSAnvil.SmithItem(Item: TRSItem; Quantity: ERSAnvilButton): Boolean;
var
  Slot: Int32;
begin
  if not Self.FindItem(Item, Slot) then
    Exit;

  Result := Self.SmithSlot(Slot, Quantity)
end;


procedure TRSAnvil.Draw(bitmap: TMufasaBitmap); override;
var
  boxes: TBoxArray;
  i: Int32;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  bitmap.DrawButtons(Self.GetButtons);
  boxes := Self.GetSlots;
  bitmap.DrawBoxes(boxes, $00FFFF);

  for i := 0 to High(boxes) do
    bitmap.DrawBox(Self.GetItemSlot(i), $FFFFFF);
end;

(*
## var Anvil
  Global Anvil variable.
*)
var
  Anvil: TRSAnvil;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;

  Anvil.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup(); override;
begin
  inherited;

  Anvil.Setup();
end;

procedure TSRL.Debug(bitmap: TMufasaBitmap); override;
begin
  inherited;

  Anvil.Draw(bitmap);
end;

function TRSMainScreen.IsVisible(p: TPoint): Boolean; override;
begin
  Result := inherited;

  if not Result or (RSClient.Mode = ERSClientMode.FIXED) then
    Exit;

  if Anvil.Bounds().Expand(5).Contains(p) and Anvil.IsOpen() then
    Exit(False);
end;

function TRSMainScreen.IsVisible(tpa: TPointArray; useCenter: Boolean = True): Boolean; override;
begin
  Result := inherited;

  if Result and useCenter then
    Exit;

  if not Result or (RSClient.Mode = ERSClientMode.FIXED) then
    Exit;

  if Anvil.Bounds().Expand(5).ContainsAll(tpa) and Anvil.IsOpen() then
    Exit(False);
end;
